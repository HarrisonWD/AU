@page "/shop"
@page "/{categoryUrl}"
@page "/search/{searchText}"
@inject IProductService ProductService
@implements IDisposable

<h3>Main Shop</h3>

@if (ProductService.Products == null || ProductService.Products.Count == 0)
{
    <span>@ProductService.Message</span>
}
else
{
    <div class="container">
        <div class="row justify-content-center align-content-center">
            @foreach (var product in ProductService.Products)
            {
                <div class="col">
                    <div class="card" style="width: 18rem;">
                        <img src="" class="card-img-top" alt="@product.Image">
                        <div class="card-body">
                            <h5 class="card-title">@product.Name</h5>
                            <p class="card-text">@product.Description</p>
                            <h6>@GetPriceText(product)</h6>
                            <a href="/product/@product.Id" class="btn btn-primary">View More</a>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code
{
    [Parameter]
    public string? CategoryUrl { get; set; } = null;

    [Parameter]
    public string? SearchText { get; set; } = null;

    protected override async Task OnParametersSetAsync()
    {
        if (SearchText != null)
        {
            await ProductService.SearchProducts(SearchText);
        }
        else
        {
            await ProductService.GetProducts(CategoryUrl);
        }
        
    }
    protected override void OnInitialized()
    {
        ProductService.ProductsChanged += StateHasChanged;
    }

    public void Dispose()
    {
        ProductService.ProductsChanged -= StateHasChanged;
    }

    private string GetPriceText(Product product)
    {
        var variants = product.Variants;
        if (variants.Count == 0)
        {
            return string.Empty;
        } 
        else if (variants.Count == 1)
        {
            return $"£{variants[0].Price}";
        }
        decimal minPrice = variants.Min(v => v.Price);
        return $"Starting at £{minPrice}";
    }
}
